{"version":3,"file":"static/js/5198.af6f2dd7.chunk.js","mappings":"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","sources":["views/notifications/toasts/Toasts.js"],"sourcesContent":["import React, { useRef, useState } from 'react'\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CButton,\n  CRow,\n  CCol,\n  CToast,\n  CToastBody,\n  CToastClose,\n  CToastHeader,\n  CToaster,\n} from '@coreui/react'\nimport { DocsCallout, DocsExample } from 'src/components'\n\nconst ExampleToast = () => {\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n  const exampleToast = (\n    <CToast title=\"CoreUI for React.js\">\n      <CToastHeader closeButton>\n        <svg\n          className=\"rounded me-2\"\n          width=\"20\"\n          height=\"20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          focusable=\"false\"\n          role=\"img\"\n        >\n          <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n        </svg>\n        <strong className=\"me-auto\">CoreUI for React.js</strong>\n        <small>7 min ago</small>\n      </CToastHeader>\n      <CToastBody>Hello, world! This is a toast message.</CToastBody>\n    </CToast>\n  )\n  return (\n    <>\n      <CButton onClick={() => addToast(exampleToast)}>Send a toast</CButton>\n      <CToaster ref={toaster} push={toast} placement=\"top-end\" />\n    </>\n  )\n}\n\nconst Toasts = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <DocsCallout name=\"Toast\" href=\"components/toast\" />\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Basic</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Toasts are as flexible as you need and have very little required markup. At a minimum,\n              we require a single element to contain your “toasted” content and strongly encourage a\n              dismiss button.\n            </p>\n            <DocsExample href=\"components/toast\">\n              <CToast title=\"CoreUI for React.js\" autohide={false} visible={true}>\n                <CToastHeader closeButton>\n                  <svg\n                    className=\"rounded me-2\"\n                    width=\"20\"\n                    height=\"20\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    preserveAspectRatio=\"xMidYMid slice\"\n                    focusable=\"false\"\n                    role=\"img\"\n                  >\n                    <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n                  </svg>\n                  <strong className=\"me-auto\">CoreUI for React.js</strong>\n                  <small>7 min ago</small>\n                </CToastHeader>\n                <CToastBody>Hello, world! This is a toast message.</CToastBody>\n              </CToast>\n            </DocsExample>\n            <DocsExample href=\"components/toast\">{ExampleToast()}</DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Translucent</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Toasts are slightly translucent to blend in with what&#39;s below them.\n            </p>\n            <DocsExample href=\"components/toast#translucent\">\n              <div className=\"bg-dark p-3\">\n                <CToast title=\"CoreUI for React.js\" autohide={false} visible={true}>\n                  <CToastHeader closeButton>\n                    <svg\n                      className=\"rounded me-2\"\n                      width=\"20\"\n                      height=\"20\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      preserveAspectRatio=\"xMidYMid slice\"\n                      focusable=\"false\"\n                      role=\"img\"\n                    >\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n                    </svg>\n                    <strong className=\"me-auto\">CoreUI for React.js</strong>\n                    <small>7 min ago</small>\n                  </CToastHeader>\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                </CToast>\n              </div>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Stacking</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              You can stack toasts by wrapping them in a toast container, which will vertically add\n              some spacing.\n            </p>\n            <DocsExample href=\"components/toast#stacking\">\n              <CToaster>\n                <CToast title=\"CoreUI for React.js\" autohide={false} visible={true}>\n                  <CToastHeader closeButton>\n                    <svg\n                      className=\"rounded me-2\"\n                      width=\"20\"\n                      height=\"20\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      preserveAspectRatio=\"xMidYMid slice\"\n                      focusable=\"false\"\n                      role=\"img\"\n                    >\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n                    </svg>\n                    <strong className=\"me-auto\">CoreUI for React.js</strong>\n                    <small>7 min ago</small>\n                  </CToastHeader>\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                </CToast>\n                <CToast title=\"CoreUI for React.js\" autohide={false} visible={true}>\n                  <CToastHeader closeButton>\n                    <svg\n                      className=\"rounded me-2\"\n                      width=\"20\"\n                      height=\"20\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      preserveAspectRatio=\"xMidYMid slice\"\n                      focusable=\"false\"\n                      role=\"img\"\n                    >\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n                    </svg>\n                    <strong className=\"me-auto\">CoreUI for React.js</strong>\n                    <small>7 min ago</small>\n                  </CToastHeader>\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                </CToast>\n              </CToaster>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Custom content</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Customize your toasts by removing sub-components, tweaking them with{' '}\n              <a href=\"https://coreui.io/docs/4.0/utilities/api\">utilities</a>, or by adding your\n              own markup. Here we&#39;ve created a simpler toast by removing the default{' '}\n              <code>&lt;CToastHeader&gt;</code>, adding a custom hide icon from{' '}\n              <a href=\"https://icons.coreui.io\">CoreUI Icons</a>, and using some{' '}\n              <a href=\"https://coreui.io/docs/4.0/utilities/flex\">flexbox utilities</a> to adjust\n              the layout.\n            </p>\n            <DocsExample href=\"components/toast#custom-content\">\n              <CToast autohide={false} className=\"align-items-center\" visible={true}>\n                <div className=\"d-flex\">\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                  <CToastClose className=\"me-2 m-auto\" />\n                </div>\n              </CToast>\n            </DocsExample>\n            <p className=\"text-medium-emphasis small\">\n              Alternatively, you can also add additional controls and components to toasts.\n            </p>\n            <DocsExample href=\"components/toast#custom-content\">\n              <CToast autohide={false} visible={true}>\n                <CToastBody>\n                  Hello, world! This is a toast message.\n                  <div className=\"mt-2 pt-2 border-top\">\n                    <CButton type=\"button\" color=\"primary\" size=\"sm\">\n                      Take action\n                    </CButton>\n                    <CToastClose component={CButton} color=\"secondary\" size=\"sm\" className=\"ms-1\">\n                      Close\n                    </CToastClose>\n                  </div>\n                </CToastBody>\n              </CToast>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Custom content</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Building on the above example, you can create different toast color schemes with our{' '}\n              <a href=\"https://coreui.io/docs/4.0/utilities/colors\">color</a> and{' '}\n              <a href=\"https://coreui.io/docs/4.0//utilities/background\">background</a> utilities.\n              Here we&#39;ve set <code>color=&#34;primary&#34;</code> and added{' '}\n              <code>.text-white</code> class to the <code>&lt;Ctoast&gt;</code>, and then set{' '}\n              <code>white</code> property to our close button. For a crisp edge, we remove the\n              default border with <code>.border-0</code>.\n            </p>\n            <DocsExample href=\"components/toast#color-schemes\">\n              <CToast\n                autohide={false}\n                color=\"primary\"\n                className=\"text-white align-items-center\"\n                visible={true}\n              >\n                <div className=\"d-flex\">\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                  <CToastClose className=\"me-2 m-auto\" white />\n                </div>\n              </CToast>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Toasts\n"],"names":["ExampleToast","useState","toast","addToast","toaster","useRef","exampleToast","title","closeButton","className","width","height","xmlns","preserveAspectRatio","focusable","role","fill","onClick","ref","push","placement","xs","name","href","autohide","visible","type","color","size","component","CButton","white"],"sourceRoot":""}